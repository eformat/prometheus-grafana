---
kind: Template
apiVersion: v1
metadata:
  name: grafana-ocp
  annotations:
    "openshift.io/display-name": Grafana ocp
    description: |
      Grafana server with patched Prometheus datasource.
    iconClass: icon-cogs
    tags: "metrics,monitoring,grafana,prometheus"
parameters:
- description: External URL for the grafana route
  name: ROUTE_URL
  value: ""
- description: The namespace to instantiate grafana under. Defaults to 'grafana'.
  name: NAMESPACE
  value: grafana
objects:
- apiVersion: v1
  kind: Route
  metadata:
    name: grafana-ocp
    namespace: "${NAMESPACE}"
  spec:
    host: "${ROUTE_URL}"
    to:
      name: grafana-ocp
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: grafana-ocp
    name: grafana-ocp
  spec:
    ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: grafana-ocp
      deploymentconfig: grafana-ocp
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: grafana-ocp
    name: grafana-ocp
  spec:
    replicas: 1
    selector:
      app: grafana-ocp
      deploymentconfig: grafana-ocp
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: grafana-ocp
          deploymentconfig: grafana-ocp
      spec:
        containers:
        - image: "mrsiano/grafana-ocp:latest"
          imagePullPolicy: Always
          name: grafana-ocp
          ports:
          - name: grafana-http
            containerPort: 3000
          volumeMounts:
          - name: data
            mountPath: "/root/go/src/github.com/grafana/grafana/data"
          command:
          - "./bin/grafana-server"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
              - echo
              - ok
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1

          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 60
        volumes:
        - name: data
          emptyDir: {}
